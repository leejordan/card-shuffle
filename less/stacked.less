//
// Stacked panels
// --------------------------------------------------

///
// Variables
// --------------------------------------------------
@colorPositive: lighten(#80a000, 40%);
@colorDefault: #333;
@height: 400px;
@verticalMovement: 50px;
@buffer: 20px;
@zindex-base: 900;
@zindex-top: 950;
@numCards: 5;

///
// Mixins stolen from bootstrap - remove these if you already use bootstrap
// --------------------------------------------------
.transition(@transition) {
    -webkit-transition:     @transition;
    -moz-transition:        @transition;
    -ms-transition:         @transition;
    -o-transition:          @transition;
    transition:             @transition;
}

.transform(@string){
    -webkit-transform:      @string;
    -moz-transform:         @string;
    -ms-transform:          @string;
    -o-transform:           @string;
    transform:              @string;
}

.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow;
          box-shadow: @shadow;
}

.img-responsive() {
  display: block;
  max-width: 100%;
  height: auto; 
}

.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

///
// Mixins specific for the stacked cards
// --------------------------------------------------

// Generates stacked card css
.generateCards (@n) when (@n > 0) {
    .cardWidth(@n);
    .cardPosition(@n);
    .generateCards(@n - 1);
}

// Widths
.cardWidth(@n : 1) {
    @nth: ~":nth-last-child(@{n})";
    &:first-child@{nth},
    &:first-child@{nth} ~ .stacked-card {
        width: 100% - (10% * @n) + 10%;
    }
}

// Positions
.cardPosition(@n : 1) {
    @nth: ~":nth-child(@{n})";
    &@{nth} {
        left: (@n - 1) * 10%;
        z-index: (@zindex-base - @n) - 1;
    }
}

// Card lifted up
.cardUp() {
    border-color: @colorDefault;
    margin-top: -@verticalMovement;
    .transform(scale(0.8)rotate(1deg));
}

// Card back in the stack
.cardDown() {
    border-color: @colorDefault;
    margin-top: 0;
    .transform(scale(0.8)rotate(0deg));
}

.cardSelected() {
    z-index: @zindex-top;
    left: 10%;
    right: 10%;
    top: 50%;
    width: 80% !important;
    .transform(scale(1));

    &:hover,
    &:focus {
        .cardDown();
        .transform(scale(1));
    }

    .stacked-card-select {
        .cardSelectorOff();
    }
}

.cardNotSelected() {
    .transform(translate3d(0,0,0));
    .transform(scale(0.8));
    -webkit-perspective: 1000;
    -webkit-backface-visibility: hidden;
    outline: none;
    position: absolute;
    z-index: @zindex-base;
    float: left;
    min-height: @height;
    border: 1px solid @colorDefault;
    .box-shadow(0 0 3px @colorDefault);
    background: #fff;

    &:hover,
    &:focus {
        .cardUp();
    }

    .stacked-card-select {
        .cardSelectorOn();
    }
}

.cardSelectorOn() {
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    opacity: 0.6;
}

.cardSelectorOff() {
    display: none;
}

///
// Generate css
// --------------------------------------------------

body {
    background-color: #e9e9e9;
}

.stacked-card-wrap {
    position: relative;
    min-height: @height;
    padding-top: (@verticalMovement + @buffer);
    margin-bottom: ((@height / 2) + @buffer);

    .stacked-card {
        .generateCards(@numCards);
        .cardNotSelected();
        .transition(all 0.4s ease-in-out);

        &:hover,
        &:focus {
            .cardUp();
        }

        &:target {
            .cardSelected();
        }
    }
}
